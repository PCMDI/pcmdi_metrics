name: CI/CD Build Workflow

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

  workflow_dispatch:

env:
    CANCEL_OTHERS: true
    PATHS_IGNORE: '["**/README.rst", "**/docs/**", "**/ISSUE_TEMPLATE/**", "**/pull_request_template.md", "**/.vscode/**"]'

jobs:
  check-jobs-to-skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: true
          paths_ignore: '["**/README.md", "**/docs/**", "**/ISSUE_TEMPLATE/**", "**/pull_request_template.md", "**/.vscode/**"]'

  pre-commit-hooks:
    needs: check-jobs-to-skip
    if: ${{ needs.check-jobs-to-skip.outputs.should_skip != 'true'}} || ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install and Run Pre-commit
        uses: pre-commit/action@v3.0.0

  build:
    needs: check-jobs-to-skip
    if: ${{ needs.check-jobs-to-skip.outputs.should_skip != 'true'}} || ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Set up Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: "pcmdi_metrics_ci"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          environment-file: conda-env/ci.yml
          use-mamba: true
          mamba-version: "*"
          channel-priority: strict
          auto-update-conda: true

      # Used for refreshing the cache every 24 hours to avoid inconsistencies of package
      # versions between the CI pipeline and local installations.
      - name: Get Date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Conda
        uses: actions/cache@v3
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('conda-env/dev.yml') }}-${{ env.CACHE_NUMBER}}
        env:
          # Increase this value to reset cache if conda/dev.yml has not changed in the workflow
          CACHE_NUMBER: 0

      - name: Install pcmdi_metrics
        # Source: https://github.com/conda/conda-build/issues/4251#issuecomment-1053460542
        run: |
            python -m pip install --no-build-isolation --no-deps -e .

      - name: Run Tests
        run: |
          pytest

      - name: Run Unit Tests
        run: pytest tests


  publish-docs:
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Conda
        uses: actions/cache@v3
        env:
          # Increase this value to reset cache if conda-env/ci.yml has not changed in the workflow
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda-env/ci.yml') }}

      - name: Set up Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: "pcmdi_metrics_dev"
          miniforge-variant: Miniforge3
          miniforge-version: latest
          environment-file: conda-env/dev.yml
          channel-priority: strict
          auto-update-conda: true

      - name: Install pcmdi_metrics
        # Source: https://github.com/conda/conda-build/issues/4251#issuecomment-1053460542
        run: |
            python -m pip install --no-build-isolation --no-deps -e .

      - name: Build Sphinx Docs
        run: |
          sphinx-build docs _build

      - name: Copy Docs and Commit
        run: |
          # gh-pages branch must already exist
          git clone https://github.com/PCMDI/pcmdi_metrics.git --branch gh-pages --single-branch gh-pages

          # Make sure we're in the gh-pages directory.
          cd gh-pages

          # Create `.nojekyll` (if it doesn't already exist) for proper GH Pages configuration.
          touch .nojekyll

          # Add `index.html` to point to the `main` branch automatically.
          printf '<meta http-equiv="refresh" content="0; url=./_build/html/main/index.html" />' > index.html

          # Only replace `main` docs with latest changes. Docs for tags should be untouched.
          rm -rf _build/html/main
          mkdir -p _build/html/main
          cp -r ../docs/_build/html/main _build/html

          # Configure git using GitHub Actions credentials.
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # The below command will fail if no changes were present, so we ignore it
          git add .
          git commit -m "Update documentation" -a || true

      - name: Push Changes
        uses: ad-m/github-push-action@master
        with:
          branch: gh-pages
          directory: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true